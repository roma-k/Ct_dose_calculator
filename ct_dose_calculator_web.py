import streamlit as st
import PyPDF2
import pandas as pd
from io import BytesIO
import re

# –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
COEFFICIENTS = {
    '–ì–æ–ª–æ–≤–∞ –∏ —à–µ—è': {'0': 0.013, '1': 0.0085, '5': 0.0057, '10': 0.0042, 'adult': 0.0031},
    '–ì–æ–ª–æ–≤–∞': {'0': 0.011, '1': 0.0067, '5': 0.0040, '10': 0.0032, 'adult': 0.0021},
    '–®–µ—è': {'0': 0.017, '1': 0.012, '5': 0.011, '10': 0.0079, 'adult': 0.0059},
    '–ì—Ä—É–¥—å': {'0': 0.039, '1': 0.026, '5': 0.018, '10': 0.013, 'adult': 0.014},
    '–ñ–∏–≤–æ—Ç –∏ —Ç–∞–∑': {'0': 0.049, '1': 0.030, '5': 0.020, '10': 0.015, 'adult': 0.015},
    '–¢—É–ª–æ–≤–∏—â–µ': {'0': 0.044, '1': 0.028, '5': 0.019, '10': 0.014, 'adult': 0.015}
}

AGE_CATEGORIES = {
    "–ù–æ–≤–æ—Ä–æ–∂–¥—ë–Ω–Ω—ã–µ (0 –ª–µ—Ç)": "0",
    "–î–µ—Ç–∏ –¥–æ 1 –≥–æ–¥–∞": "1",
    "–î–µ—Ç–∏ 1‚Äì5 –ª–µ—Ç": "5",
    "–î–µ—Ç–∏ 5‚Äì10 –ª–µ—Ç": "10",
    "–í–∑—Ä–æ—Å–ª—ã–µ (>10 –ª–µ—Ç)": "adult"
}

# –ü–æ–º–æ—â—å –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
HELP_TEXT = """
- **–ì–æ–ª–æ–≤–∞**: –ö–¢ –º–æ–∑–≥–∞, –ø–∞–∑—É—Ö, –≤–∏—Å–æ—á–Ω—ã—Ö –∫–æ—Å—Ç–µ–π (–¥–æ –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞).
- **–®–µ—è**: –ö–¢ —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑—ã, —Å–æ—Å—É–¥–æ–≤ —à–µ–∏ (–æ—Ç –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞ –¥–æ –∫–ª—é—á–∏—Ü).
- **–ì–æ–ª–æ–≤–∞ –∏ —à–µ—è**: –ö–¢ –æ—Ç –≤–µ—Ä—Ö—É—à–∫–∏ —á–µ—Ä–µ–ø–∞ –¥–æ –∫–ª—é—á–∏—Ü (–æ–Ω–∫–æ–ª–æ–≥–∏—è, –∞–Ω–≥–∏–æ–≥—Ä–∞—Ñ–∏—è).
- **–ì—Ä—É–¥—å**: –ö–¢ –ª—ë–≥–∫–∏—Ö, —Å–µ—Ä–¥—Ü–∞.
- **–ñ–∏–≤–æ—Ç –∏ —Ç–∞–∑**: –ö–¢ –æ—Ä–≥–∞–Ω–æ–≤ –±—Ä—é—à–Ω–æ–π –ø–æ–ª–æ—Å—Ç–∏ –∏ —Ç–∞–∑–∞.
- **–¢—É–ª–æ–≤–∏—â–µ**: –°—Ä–µ–¥–Ω–µ–µ –¥–ª—è –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏ –∏ –∂–∏–≤–æ—Ç–∞.
"""

def extract_dlp_from_pdf(uploaded_file):
    """–ü–∞—Ä—Å–∏–Ω–≥ DLP –∏–∑ PDF."""
    try:
        pdf_reader = PyPDF2.PdfReader(uploaded_file)
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text() or ""
        dlp_match = re.search(r'DLP.*?(\d+\.?\d*)', text, re.IGNORECASE)
        region_match = re.search(r'(Head|Neck|Chest|Abdomen|Trunk)', text, re.IGNORECASE)
        dlp = float(dlp_match.group(1)) if dlp_match else None
        region = region_match.group(1) if region_match else None
        region_map = {"Head": "–ì–æ–ª–æ–≤–∞", "Neck": "–®–µ—è", "Chest": "–ì—Ä—É–¥—å", "Abdomen": "–ñ–∏–≤–æ—Ç –∏ —Ç–∞–∑", "Trunk": "–¢—É–ª–æ–≤–∏—â–µ"}
        return dlp, region_map.get(region, "–ì—Ä—É–¥—å") if region else "–ì—Ä—É–¥—å"
    except:
        return None, "–ì—Ä—É–¥—å"

def calculate_ed(dlp, region, age_cat):
    """–†–∞—Å—á—ë—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –¥–æ–∑—ã."""
    if dlp is None or dlp <= 0:
        return None, "DLP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º."
    if not region or not age_cat:
        return None, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏ –≤–æ–∑—Ä–∞—Å—Ç."
    if region not in COEFFICIENTS or age_cat not in COEFFICIENTS[region]:
        return None, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–≥–∏–æ–Ω –∏–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç."
    
    k = COEFFICIENTS[region][age_cat]
    ed = dlp * k
    return ed, f"–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –¥–æ–∑–∞: {ed:.2f} mSv (–§–æ—Ä–º—É–ª–∞: {dlp} √ó {k} mSv/mGy¬∑cm)"

# Streamlit UI
st.set_page_config(page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ–∑—ã –ö–¢", page_icon="ü©∫", layout="centered")
st.title("ü©∫ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ–∑—ã –ö–¢")
st.markdown("–ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á—ë—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –¥–æ–∑—ã –æ–±–ª—É—á–µ–Ω–∏—è –ø—Ä–∏ –ö–¢. –ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é.")

# Drag-and-drop PDF
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF-–æ—Ç—á—ë—Ç –ö–¢", type=["pdf"])
if uploaded_file:
    dlp, suggested_region = extract_dlp_from_pdf(uploaded_file)
    if dlp:
        st.success(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ: DLP = {dlp} mGy¬∑cm, —Ä–µ–≥–∏–æ–Ω = {suggested_region}")
    else:
        st.warning("DLP –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PDF. –í–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.")

# –í–≤–æ–¥ DLP
dlp = st.slider("DLP (mGy¬∑cm)", min_value=0.0, max_value=2000.0, value=dlp or 500.0, step=1.0)
region = st.selectbox("–†–µ–≥–∏–æ–Ω —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", list(COEFFICIENTS.keys()), index=list(COEFFICIENTS.keys()).index(suggested_region if 'suggested_region' in locals() else "–ì—Ä—É–¥—å"), help=HELP_TEXT)
age_cat_label = st.radio("–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", list(AGE_CATEGORIES.keys()), index=list(AGE_CATEGORIES.keys()).index("–í–∑—Ä–æ—Å–ª—ã–µ (>10 –ª–µ—Ç)"))

# –†–∞—Å—á—ë—Ç
age_cat = AGE_CATEGORIES[age_cat_label]
ed, message = calculate_ed(dlp, region, age_cat)

# –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
if ed is not None:
    st.markdown(f"<h3 style='color: #4CAF50;'>{message}</h3>", unsafe_allow_html=True)
    st.markdown("<p style='color: #FF9800;'>–û—Ü–µ–Ω–æ—á–Ω—ã–π —Ä–∞—Å—á—ë—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.</p>", unsafe_allow_html=True)
else:
    st.markdown(f"<p style='color: red;'>{message}</p>", unsafe_allow_html=True)

# –ö–Ω–æ–ø–∫–∏
col1, col2 = st.columns(2)
with col1:
    if st.button("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"):
        if ed:
            st.write_text(message)
            st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!")
        else:
            st.error("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.")
with col2:
    if st.button("–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"):
        if ed:
            df = pd.DataFrame([{
                "–î–∞—Ç–∞": pd.Timestamp.now().strftime("%Y-%m-%d %H:%M:%S"),
                "DLP": dlp,
                "–†–µ–≥–∏–æ–Ω": region,
                "–í–æ–∑—Ä–∞—Å—Ç": age_cat_label,
                "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –¥–æ–∑–∞ (mSv)": ed
            }])
            csv = df.to_csv(index=False).encode('utf-8')
            st.download_button("–°–∫–∞—á–∞—Ç—å CSV", csv, f"ct_dose_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.csv", "text/csv")
        else:
            st.error("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")

# –ü–æ–¥—Å–∫–∞–∑–∫–∞
with st.expander("–ü–æ–º–æ—â—å –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º"):
    st.markdown(HELP_TEXT)
